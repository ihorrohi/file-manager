<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAHh4AAAEAIACwDgAAFgAAACgAAAAeAAAAPAAAAAEAIAAAAAAAEA4AABMLAAATCwAAAAAAAAAA
        AADQ0NACoaGhA5ycnAOioqIEnp6eA6GhoQKhoaEDnZ2dBJ+fnwSjo6MEn5+fA6KiogShoaEEpaWlAp2d
        nQSenp4EoqKiA6KiogOhoaEEoKCgBKKiogOampoEqqqqAMbGxgDHx8cAyMjIAKampgSZmZkEo6OjAsHB
        wQOvr68DRUVFCExMTAdTU1MHU1NTB1NTUwZUVFQHVVVVB1JSUghRUVEIUVFRB1JSUgdRUVEHUlJSB1VV
        VQdUVFQHUlJSB1JSUgdSUlIHUlJSB1hYWANtbW0Aenp6AG1tbRNvb28aZmZmAGFhYQBhYWEAQkJCCZmZ
        mQOoqKgEQEBACE5OTgZWVlYDVVVVAFRUVABUVFQAVVVVAFVVVQBUVFQAVVVVAFRUVABVVVUAVFRUAFRU
        VABVVVUBVVVVAFVVVQBYWFgHS0tLAEtLSwAzMzNOCAgI1gAAAO4AAADvAAAA4xYWFnlMTEwEQEBAAJOT
        kwWrq6sDVlZWAFxcXABbW1sAUlJSAFNTUwBTU1MAVFRUAFNTUwBTU1MAVFRUAFRUVABUVFQAU1NTAFNT
        UwBUVFQAU1NTAFZWVgBcXFwALCwsAwYGBpsAAAD/BwcH5ggICKICAgKOCQkJ1gAAAP8HBwfROzs7Fqur
        qwDExMQBSUlJECEhIX8TExOQERERrxEREbEQEBCwERERsBAQELARERGwEhISrxISErASEhKwEBAQsBER
        EbESEhKwERERsRISErUaGhpMCgoKhAAAAP8RERGBQUFBADk5OQgPDw8XLi4uABMTE0sAAADzBAQE3WZm
        ZglWVlYAFhYWoQAAAP8AAAD/AwMD6gAAANEAAADaAAAA2QAAANkAAADZAAAA2gAAANoAAADZAAAA2AAA
        ANkAAADZAAAA2gMDA9IICAi1AQEB/xYWFopJSUkAR0dHACQkJGgeHh6cX19fAElJSQAPDw89AAAA/xoa
        GnQAAAAiAAAA/wYGBsAGBgbzAwMDWBgYGAAlJSUCIyMjAyIiIgMgICADIyMjAiMjIwIiIiIDISEhAiMj
        IwIiIiICIiIiAiAgIAAZGRmHAAAA/jU1NRBhYWEAR0dHABISEl0WFhaXbW1tAFVVVQA3NzcAGBgYwQcH
        B+QDAwMyAAAA/xUVFZoEBATtGxsbV1xcXABmZmYAYGBgAGFhYQBhYWEAYGBgAGBgYABgYGAAYWFhAGBg
        YABgYGAAampqADAwMAAEBATCFBQUtSYmJgAjIyN5BwcHigAAALUNDQ3PJCQkfxcXF50wMDAUIiIifQAA
        AP8EBAQwAQEB/w4ODqAAAADuOzs7WmxsbABUVFQHVVVVBlVVVQdVVVUGVVVVB1VVVQdVVVUIVVVVB1VV
        VQdVVVUGXV1dASYmJgAAAADAGhoawDIyMgAfHx9hJiYmbBsbG6MKCgrFHx8fZR4eHn03NzcKJycnggAA
        AP8EBAQvAQEB/w0NDaEAAADuMzMzWmhoaABWVlYGVlZWB1ZWVgZWVlYGVlZWB1ZWVgZWVlYHVlZWB1ZW
        VgdWVlYGXFxcBDo6OgAWFhaFAAAA/jg4OBZRUVEAQ0NDACoqKmMMDAycNTU1AEZGRgAtLS0ADQ0NzBgY
        GNsHBwcvAgIC/xAQEKEBAQHvMzMzW2ZmZgBWVlYHVlZWBlZWVgZWVlYHVlZWBlZWVgZWVlYGVlZWBlZW
        VgdWVlYHVVVVBmJiYgBISEgrAQEB/xoaGqdsbGwASkpKACEhIV4AAACMFRUVADo6OgAjIyNcAAAA/1JS
        Ul4ICAgvAgIC/xEREaABAQHuNDQ0W2ZmZgBWVlYGVlZWB1ZWVgdWVlYHVlZWB1ZWVgZWVlYGVlZWB1ZW
        VgZWVlYGVlZWB1paWgRQUFAAERERcwAAAP8mJiapHR0dEhwcHAsODg4OGhoaCRwcHG0HBwf/AAAAtX9/
        fwAICAgvAgIC/w8PD6AAAADuNDQ0WmdnZwBWVlYGVlZWBlZWVgdWVlYGVlZWBlZWVgdWVlYHVlZWBlZW
        VgZWVlYGVlZWB1ZWVghaWloDSkpKAAAAAHkAAAD/AAAA/xAQELkVFRWlBAQE/gMDA/8GBgahGRkZB5mZ
        mQAEBAQvAQEB/xAQEKEAAADuNDQ0WmhoaABWVlYHVlZWB1ZWVgZWVlYGVlZWBlZWVgdWVlYGVlZWB1ZW
        VgdWVlYHVlZWBlZWVgZYWFgIVlZWAS4uLgAcHBw0IiIilggICMcPDw/QCAgIjQQEBMIMDAyGPDw8AJyc
        nAEEBAQvAQEB/xAQEKAAAADuMzMzW2ZmZgBWVlYHVlZWBlZWVgZWVlYHVlZWB1ZWVgZWVlYGVlZWB1ZW
        VgdWVlYGVlZWBlZWVgdVVVUGWFhYCF5eXgZaWloATExMACEhIQAxMTEFFxcXAAAAALACAgL4bm5uALW1
        tQAFBQUvAAAA/w8PD6EAAADuNDQ0W2ZmZgBWVlYHVlZWBlZWVgZWVlYHVlZWB1ZWVgdWVlYGVlZWBlZW
        VgdWVlYGVlZWBlZWVgZWVlYHVlZWBldXVwhbW1sHVVVVA1RUVABgYGAALS0tAAAAAMQAAADmenp6AMDA
        wAADAwMvAAAA/w0NDaAAAADtNTU1W2lpaQBVVVUHVlZWBlZWVgZWVlYHVlZWB1ZWVgdWVlYHVlZWB1ZW
        VgZWVlYHVlZWB1ZWVgZWVlYHVlZWBlZWVgdVVVUGV1dXBlhYWAdjY2MFMTExAAAAAMEAAADmd3d3AL29
        vQAEBAQvAQEB/xEREaEAAADuLy8vWmpqagBZWVkHVlZWB1ZWVgZVVVUGW1tbB1lZWQZVVVUHVlZWB1ZW
        VgdWVlYHVlZWB1ZWVgZWVlYGVlZWBlZWVgVWVlYGVlZWB1VVVQdlZWUFNDQ0AAAAAMEAAADldnZ2AL29
        vQAICAgvAgIC/w8PD6IHBwfuCgoKRTk5OQBtbW0AaGhoAGZmZgBqamoAUVFRAFlZWQBra2sAZmZmAGho
        aABoaGgAZmZmAGVlZQBlZWUAZWVlAGZmZgBmZmYAZmZmAGpqagBoaGgAKCgoAAEBAbcAAADnf39/AMPD
        wwAJCQkvAgIC/wwMDKIGBgb5Dw8PpAkJCWMuLi5oNDQ0aDQ0NGk7OztpGBgYaSEhIWk5OTlpNDQ0aTMz
        M2kzMzNpNDQ0aTQ0NGkzMzNoMzMzaTQ0NGk0NDRoMzMzaTk5OWwrKyteDAwMUwEBAegCAgLpXV1dAK2t
        rQAEBAQvAAAA/x4eHmYMDAyfBQUF/wYGBv8AAAD/AAAA/wAAAP8AAADxBwcH7gMDA/AAAADwAAAA8AAA
        APAAAADwAAAA8AAAAPAAAADvAAAA8AAAAPAAAADvAAAA7wAAAO0AAAD8BQUF/wAAAPwhISGKQkJCAJSU
        lAMFBQUvAAAA/ywsLFQuLi4ANjY2LTc3NzA4ODgtMjIyMkBAQA0qKio9Hx8fXSEhIVIgICBTIiIiUx8f
        H1MgICBSIyMjUyMjI1MhISFSISEhUyMjI1MgICBTIiIiUQ0NDTsAAAC+BAQE+h0dHSRXV1cASkpKBpaW
        lgQAAAAyAAAA/y4uLlErKysAHR0dACIiIgAeHh4AMjIyACkpKUsBAQHrAAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wEBAf8AAAD/CwsLs1xcXABeXl4AR0dHCJWV
        lQQJCQkqAAAA/wICAtkAAACsAAAAsgAAALMAAACtBwcHuAAAAP8XFxezNDQ0SCsrK2AsLCxhLi4uXysr
        K2ArKytgLi4uYC0tLWArKytgKioqYC4uLmAsLCxgLCwsYCsrK2QwMDBZNDQ0GE1NTQFYWFgGR0dHB5WV
        lQSQkJADAAAAlgsLC+ANDQ3kDQ0N5Q4ODuUQEBDkCAgI6BkZGaA7OzsAUlJSAExMTABNTU0ATk5OAExM
        TABMTEwATk5OAE1NTQBMTEwAS0tLAE5OTgBNTU0ATU1NAEtLSwBQUFAAYWFhAFRUVAdUVFQGSEhIB5aW
        lgSqqqoBMTExADAwMAQ3NzcENjY2Ajo6OgI6OjoDLS0tBVNTUwBgYGAAV1dXB1hYWAVYWFgFWFhYBVhY
        WAZYWFgGWFhYBlhYWAVYWFgGWFhYBlhYWAVYWFgFWFhYBlhYWAVYWFgGVlZWB1hYWAdUVFQHR0dHB5eX
        lwSysrIET09PBkdHRwBPT08ATk5OAFBQUABQUFAATU1NAFNTUwRYWFgIV1dXB1dXVwZXV1cGV1dXBldX
        VwdXV1cHV1dXB1dXVwdXV1cGV1dXB1dXVwZXV1cHV1dXB1dXVwdXV1cGV1dXB1hYWAdVVVUGSEhIB5eX
        lwSqqqoDRERECFJSUghWVlYIVlZWB1VVVQdVVVUHV1dXB1NTUwdRUVEGUlJSBlJSUgdSUlIHUVFRBlJS
        UgZSUlIIUlJSB1JSUghSUlIHUlJSBlJSUgdSUlIGUlJSBlJSUghSUlIHUlJSBlNTUwdQUFAHQkJCCJSU
        lASsrKwDPDw8CEdHRwhPT08ITU1NBkpKSgdLS0sHS0tLB0tLSwhNTU0HTU1NBk1NTQdNTU0ITExMCExM
        TAdLS0sHSUlJCE1NTQhNTU0ITExMB0pKSgdLS0sGS0tLB0xMTAhKSkoITU1NB05OTgZKSkoHOzs7CJSU
        lAS+vr4BnZ2dA5iYmASbm5sEmZmZBJ+fnwOenp4DmZmZBJubmwSdnZ0Dm5ubBJmZmQSampoDoKCgA5mZ
        mQSampoDnZ2dA5ubmwOYmJgEmpqaA56engOcnJwDl5eXBJubmwOfn58DmJiYBJmZmQSYmJgDmZmZA76+
        vgMAAAPAAAAGcA/+2Ah//+AEAAACQIAABmAEAEZwB//IAAQASAAEAEZwBABGYAQAIAQEABAEBAAICAQA
        B0wEAAHMBAAATAQAAEwH///MAAAADAAAAAgQAAAQHwAAMAAAAAAAf//AQMAAAD8AAAAAAAAAAAAAAAAA
        AAA=
</value>
  </data>
</root>